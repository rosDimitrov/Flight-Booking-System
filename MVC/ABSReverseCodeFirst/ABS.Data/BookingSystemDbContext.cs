// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.5
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

//
namespace ABS.Data
{
    using ABS.Configuration;
    using ABS.Model;

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.29.1.0")]
    public class BookingSystemDbContext : System.Data.Entity.DbContext, IBookingSystemDbContext
    {
        public System.Data.Entity.DbSet<Airline> Airlines { get; set; } // Airline
        public System.Data.Entity.DbSet<AirlineHistory> AirlineHistories { get; set; } // AirlineHistory
        public System.Data.Entity.DbSet<Airport> Airports { get; set; } // Airport
        public System.Data.Entity.DbSet<Flight> Flights { get; set; } // Flight
        public System.Data.Entity.DbSet<FlightSection> FlightSections { get; set; } // FlightSection
        public System.Data.Entity.DbSet<FlightSectionType> FlightSectionTypes { get; set; } // FlightSectionType
        public System.Data.Entity.DbSet<Seat> Seats { get; set; } // Seat
        public System.Data.Entity.DbSet<VFlightsInformation> VFlightsInformations { get; set; } // vFlightsInformation

        static BookingSystemDbContext()
        {
            System.Data.Entity.Database.SetInitializer<BookingSystemDbContext>(null);
        }

        public BookingSystemDbContext()
            : base("Name=MyReversedCodeFirst")
        {
        }

        public BookingSystemDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public BookingSystemDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public BookingSystemDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public BookingSystemDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new AirlineConfiguration());
            modelBuilder.Configurations.Add(new AirlineHistoryConfiguration());
            modelBuilder.Configurations.Add(new AirportConfiguration());
            modelBuilder.Configurations.Add(new FlightConfiguration());
            modelBuilder.Configurations.Add(new FlightSectionConfiguration());
            modelBuilder.Configurations.Add(new FlightSectionTypeConfiguration());
            modelBuilder.Configurations.Add(new SeatConfiguration());
            modelBuilder.Configurations.Add(new VFlightsInformationConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new AirlineConfiguration(schema));
            modelBuilder.Configurations.Add(new AirlineHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new AirportConfiguration(schema));
            modelBuilder.Configurations.Add(new FlightConfiguration(schema));
            modelBuilder.Configurations.Add(new FlightSectionConfiguration(schema));
            modelBuilder.Configurations.Add(new FlightSectionTypeConfiguration(schema));
            modelBuilder.Configurations.Add(new SeatConfiguration(schema));
            modelBuilder.Configurations.Add(new VFlightsInformationConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public System.Collections.Generic.List<SpFindAvailableFlightsBetweenReturnModel> SpFindAvailableFlightsBetween(string origin, string destination)
        {
            int procResult;
            return SpFindAvailableFlightsBetween(origin, destination, out procResult);
        }

        public System.Collections.Generic.List<SpFindAvailableFlightsBetweenReturnModel> SpFindAvailableFlightsBetween(string origin, string destination, out int procResult)
        {
            var originParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Origin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = origin, Size = 3 };
            if (originParam.Value == null)
                originParam.Value = System.DBNull.Value;

            var destinationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Destination", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = destination, Size = 3 };
            if (destinationParam.Value == null)
                destinationParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<SpFindAvailableFlightsBetweenReturnModel>("EXEC @procResult = [dbo].[spFindAvailableFlightsBetween] @Origin, @Destination", originParam, destinationParam, procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<SpFindAvailableFlightsBetweenReturnModel>> SpFindAvailableFlightsBetweenAsync(string origin, string destination)
        {
            var originParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Origin", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = origin, Size = 3 };
            if (originParam.Value == null)
                originParam.Value = System.DBNull.Value;

            var destinationParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@Destination", SqlDbType = System.Data.SqlDbType.NVarChar, Direction = System.Data.ParameterDirection.Input, Value = destination, Size = 3 };
            if (destinationParam.Value == null)
                destinationParam.Value = System.DBNull.Value;

            var procResultData = await Database.SqlQuery<SpFindAvailableFlightsBetweenReturnModel>("EXEC [dbo].[spFindAvailableFlightsBetween] @Origin, @Destination", originParam, destinationParam).ToListAsync();

            return procResultData;
        }

    }
}
// </auto-generated>
